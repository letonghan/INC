

# pr:
# - main

pool:
  vmImage: ubuntu-latest

variables:
  PYTHON: 'python3.8'
  INC_VER: '1.12'
  IMAGE_NAME: 'neural-compressor'
  IMAGE_TAG: '1.12'
  INC_BRANCH: 'master'


stages:
- stage: Build
  displayName: 'Build'
  jobs:
  - job: Build
    displayName: 'Build'
    steps:
    - task: Docker@2
      displayName: 'Login to repo'
      inputs:
        command: login
        containerRegistry: inc-internal
        
    - script: docker build --build-arg PYTHON=${PYTHON} --build-arg INC_BRANCH=${INC_BRANCH} -f docker/Dockerfile.devel -t ${IMAGE_NAME}:${IMAGE_TAG} .
      displayName: 'Build Container'
    
    - script: |
        docker images | grep -i neural-compressor
        echo "------ /usr/local/bin ------"
        docker run ${IMAGE_NAME}:${IMAGE_TAG} bash -c "cd /usr/local/bin && ls"
        echo "------ /usr/local/lib ------"
        docker run ${IMAGE_NAME}:${IMAGE_TAG} bash -c "cd /usr/local/lib && ls"
      displayName: 'Check docker'
    
    # - script: |
    #     docker run ${IMAGE_NAME}:${IMAGE_TAG} /usr/local/bin/python -c "import neural_compressor as nc;print(nc.version.__version__)"
    #     docker run --env PYTHONPATH="/neural-compressor" ${IMAGE_NAME}:${IMAGE_TAG} /usr/local/bin/python /neural-compressor/test/config/test_config.py
    #   displayName: 'Run python sciprt'
    
    - script: |
        docker run --env PYTHONPATH="/neural-compressor" ${IMAGE_NAME}:${IMAGE_TAG} /usr/local/bin/python -m pip install --target=/usr/local/lib/python3.8/dist-packages -r examples/pytorch/nlp/huggingface_models/summarization/quantization/ptq_dynamic/eager/requirements.txt
        echo "-------- show python settings -------"
        docker run --env PYTHONPATH="/neural-compressor" ${IMAGE_NAME}:${IMAGE_TAG} python -m site
        echo "-------- show python3 settings -------"
        docker run --env PYTHONPATH="/neural-compressor" ${IMAGE_NAME}:${IMAGE_TAG} python3 -m site
        echo "-------- show /usr/local/bin/python settings -------"
        docker run --env PYTHONPATH="/neural-compressor" ${IMAGE_NAME}:${IMAGE_TAG} /usr/local/bin/python -m site
        echo "-------- /usr/local/lib/python3.8/dist-packages --------"
        docker run ${IMAGE_NAME}:${IMAGE_TAG} bash -c "cd /usr/local/lib/python3.8/dist-packages && ls"
        echo "--------pip list --------"
        docker run --env PYTHONPATH="/neural-compressor" ${IMAGE_NAME}:${IMAGE_TAG} /usr/local/bin/python -m pip list
      displayName: 'Install model requirements'

    - script: |
        docker run --env PYTHONPATH="/neural-compressor" ${IMAGE_NAME}:${IMAGE_TAG} /usr/local/bin/python /neural-compressor/examples/pytorch/nlp/huggingface_models/summarization/quantization/ptq_dynamic/eager/run_summarization.py --model_name_or_path lvwerra/pegasus-samsum --do_train --do_eval --predict_with_generate --per_device_eval_batch_size 16 --output_dir saved_results --overwrite_output_dir --tune
      #  docker run --env PYTHONPATH="/neural-compressor" ${IMAGE_NAME}:${IMAGE_TAG} bash -c "cd examples/pytorch/nlp/huggingface_models/summarization/quantization/ptq_dynamic/eager && /usr/local/bin/python3 run_summarization.py --model_name_or_path lvwerra/pegasus-samsum --do_train --do_eval --predict_with_generate --per_device_eval_batch_size 16 --output_dir saved_results --overwrite_output_dir --tune"
      #  docker run --env PYTHONPATH="/neural-compressor" ${IMAGE_NAME}:${IMAGE_TAG} bash -c "examples/pytorch/nlp/huggingface_models/summarization/quantization/ptq_dynamic/eager/run_tuning.sh --topology=pegasus_samsum"
      displayName: 'Tuning Summarization'
        
    # - script: |
    #     docker run --env PYTHONPATH="/neural-compressor" ${IMAGE_NAME}:${IMAGE_TAG} /usr/local/bin/python train_without_distillation.py --epochs 200 --lr 0.1 --layers 40 --widen-factor 2 --name WideResNet-40-2 --tensorboard
    #   displayName: 'Train teacher model'
    
    # - script: |
    #     docker run --env PYTHONPATH="/neural-compressor" ${IMAGE_NAME}:${IMAGE_TAG} /usr/local/bin/python main.py --epochs 200 --lr 0.02 --name MobileNetV2-0.35-distillation --teacher_model runs/WideResNet-40-2/model_best.pth.tar --tensorboard --seed 9 
    #   displayName: 'Distillation'
    